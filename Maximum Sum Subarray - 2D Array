//Given a 2D array, find the maximum sum subarray in it.

import java.io.*;
import java.util.*;

public class result {
    public int row, col, col_size, row_size;
}

class Solution{
    public static void main(String[] args){
        int [][] matrix = new int[][]{
           {1, 2, -1, -4, -20},
                            {-8, -3, 4, 2, 1},
                            {3, 8, 10, 1, 3},
                            {-4, -1, 1, 7, -6}
    };    
    
    result res = new result();
    System.out.println("max sum = " + subMatrixSum(matrix, res));
    System.out.print("row = " + res.row + " col = " + res.col + " row size =" + res.row_size + " col size = " + res.col_size);
}
public static int subMatrixSum(int[][] matrix, result res) {
    int maxSum = -Integer.MAX_VALUE;

    for(int row=1;row<=matrix.length;row++){                     //rows in the given matrix
        for(int col=1;col<=matrix[0].length;col++){              //cols in the given matrix
            for(int srow=0;srow<matrix.length-row+1;srow++){     //sub matrix row
                for(int scol=0;scol<matrix[0].length-col+1;scol++){ //sub matrix column
                    int sum=0;
                    
                    for(int k=srow;k<srow+row;k++){
                        for(int l=scol;l<scol+col;l++){
                            sum+=matrix[k][l];
                        }
                    }
                    if(maxSum<sum){
                        maxSum=sum;
                        res.row = srow;
                        res.col = scol;
                        res.row_size = row;
                        res.col_size = col;
                    }
                }
            }
        }
    }
    return maxSum;
}
}
