QUESTION:
Given an array  of  elements, find the maximum possible sum of a

Contiguous subarray
Non-contiguous (not necessarily contiguous) subarray.
Empty subarrays/subsequences should not be considered.

Question mentioned in :https://www.hackerrank.com/challenges/maxsubarray
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Using BRUTE- FORCE ALGORITHM

import java.io.*;
import java.util.*;

public class Solution {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();   // number of test cases 
        for(int c=0;c<t;c++){   // count the cases
            int n = sc.nextInt();
            int a[] = new int[n];
            int disc_sum =0;    // maximum non-continuous sum
            
            for(int i=0;i<n;i++){
                a[i]=sc.nextInt();
                if(a[i]>0) 
                    disc_sum+=a[i];
            }
            
            int max=Integer.MIN_VALUE;   // assigning the lowest possible value to the continuous sum
           
            for(int l=1;l<=n;l++){       // length of subarray- starts from 1
                for(int s=0;s<n;s++){    // starting index- starts from 0
                    if((s+l)>n)
                        break;
                    else{
                        int sum=0;
                        for(int i=s;i<(s+l);i++)
                            sum+= a[i];
                        if(max<sum)
                            max=sum;
                    }// else part ends
                } // for loop ends
            } //for loop ends
            System.out.print("Maxm possible sum of Contiguous subarray"+max);
            System.out.println("Maxm possible sum of Non-contiguous subarray"+disc_sum);
        } //for loop ends
    }
}
